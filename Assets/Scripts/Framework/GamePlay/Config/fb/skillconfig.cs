// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct skillconfigTB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static skillconfigTB GetRootAsskillconfigTB(ByteBuffer _bb) { return GetRootAsskillconfigTB(_bb, new skillconfigTB()); }
  public static skillconfigTB GetRootAsskillconfigTB(ByteBuffer _bb, skillconfigTB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public skillconfigTB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public fb.skillconfigTR? SkillconfigTRS(int j) { int o = __p.__offset(4); return o != 0 ? (fb.skillconfigTR?)(new fb.skillconfigTR()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillconfigTRSLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public fb.skillconfigTR? SkillconfigTRSByKey(int key) { int o = __p.__offset(4); return o != 0 ? fb.skillconfigTR.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<fb.skillconfigTB> CreateskillconfigTB(FlatBufferBuilder builder,
      VectorOffset skillconfigTRSOffset = default(VectorOffset)) {
    builder.StartTable(1);
    skillconfigTB.AddSkillconfigTRS(builder, skillconfigTRSOffset);
    return skillconfigTB.EndskillconfigTB(builder);
  }

  public static void StartskillconfigTB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSkillconfigTRS(FlatBufferBuilder builder, VectorOffset skillconfigTRSOffset) { builder.AddOffset(0, skillconfigTRSOffset.Value, 0); }
  public static VectorOffset CreateSkillconfigTRSVector(FlatBufferBuilder builder, Offset<fb.skillconfigTR>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillconfigTRSVectorBlock(FlatBufferBuilder builder, Offset<fb.skillconfigTR>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillconfigTRSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<fb.skillconfigTB> EndskillconfigTB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.skillconfigTB>(o);
  }
  public static void FinishskillconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.skillconfigTB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedskillconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.skillconfigTB> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct skillconfigTR : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static skillconfigTR GetRootAsskillconfigTR(ByteBuffer _bb) { return GetRootAsskillconfigTR(_bb, new skillconfigTR()); }
  public static skillconfigTR GetRootAsskillconfigTR(ByteBuffer _bb, skillconfigTR obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public skillconfigTR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public int Cooltime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Costsp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Attackdistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Attackangle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Attacktargettags(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttacktargettagsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Impacttype(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ImpacttypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Nextbattlerid { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Atkratio { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Durationtime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Atkinterval { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Skillprefab { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillprefabBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSkillprefabBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSkillprefabArray() { return __p.__vector_as_array<byte>(30); }
  public string Animationname { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationnameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetAnimationnameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetAnimationnameArray() { return __p.__vector_as_array<byte>(32); }
  public string Hitfxprefab { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHitfxprefabBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetHitfxprefabBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetHitfxprefabArray() { return __p.__vector_as_array<byte>(34); }
  public int Level { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Attacktype { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Selectortype { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<fb.skillconfigTR> CreateskillconfigTR(FlatBufferBuilder builder,
      int _id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int cooltime = 0,
      int costsp = 0,
      float attackdistance = 0.0f,
      float attackangle = 0.0f,
      VectorOffset attacktargettagsOffset = default(VectorOffset),
      VectorOffset impacttypeOffset = default(VectorOffset),
      int nextbattlerid = 0,
      float atkratio = 0.0f,
      float durationtime = 0.0f,
      float atkinterval = 0.0f,
      StringOffset skillprefabOffset = default(StringOffset),
      StringOffset animationnameOffset = default(StringOffset),
      StringOffset hitfxprefabOffset = default(StringOffset),
      int level = 0,
      int attacktype = 0,
      int selectortype = 0) {
    builder.StartTable(19);
    skillconfigTR.AddSelectortype(builder, selectortype);
    skillconfigTR.AddAttacktype(builder, attacktype);
    skillconfigTR.AddLevel(builder, level);
    skillconfigTR.AddHitfxprefab(builder, hitfxprefabOffset);
    skillconfigTR.AddAnimationname(builder, animationnameOffset);
    skillconfigTR.AddSkillprefab(builder, skillprefabOffset);
    skillconfigTR.AddAtkinterval(builder, atkinterval);
    skillconfigTR.AddDurationtime(builder, durationtime);
    skillconfigTR.AddAtkratio(builder, atkratio);
    skillconfigTR.AddNextbattlerid(builder, nextbattlerid);
    skillconfigTR.AddImpacttype(builder, impacttypeOffset);
    skillconfigTR.AddAttacktargettags(builder, attacktargettagsOffset);
    skillconfigTR.AddAttackangle(builder, attackangle);
    skillconfigTR.AddAttackdistance(builder, attackdistance);
    skillconfigTR.AddCostsp(builder, costsp);
    skillconfigTR.AddCooltime(builder, cooltime);
    skillconfigTR.AddDescription(builder, descriptionOffset);
    skillconfigTR.AddName(builder, nameOffset);
    skillconfigTR.Add_id(builder, _id);
    return skillconfigTR.EndskillconfigTR(builder);
  }

  public static void StartskillconfigTR(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void Add_id(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(2, descriptionOffset.Value, 0); }
  public static void AddCooltime(FlatBufferBuilder builder, int cooltime) { builder.AddInt(3, cooltime, 0); }
  public static void AddCostsp(FlatBufferBuilder builder, int costsp) { builder.AddInt(4, costsp, 0); }
  public static void AddAttackdistance(FlatBufferBuilder builder, float attackdistance) { builder.AddFloat(5, attackdistance, 0.0f); }
  public static void AddAttackangle(FlatBufferBuilder builder, float attackangle) { builder.AddFloat(6, attackangle, 0.0f); }
  public static void AddAttacktargettags(FlatBufferBuilder builder, VectorOffset attacktargettagsOffset) { builder.AddOffset(7, attacktargettagsOffset.Value, 0); }
  public static VectorOffset CreateAttacktargettagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttacktargettagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttacktargettagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImpacttype(FlatBufferBuilder builder, VectorOffset impacttypeOffset) { builder.AddOffset(8, impacttypeOffset.Value, 0); }
  public static VectorOffset CreateImpacttypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateImpacttypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartImpacttypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNextbattlerid(FlatBufferBuilder builder, int nextbattlerid) { builder.AddInt(9, nextbattlerid, 0); }
  public static void AddAtkratio(FlatBufferBuilder builder, float atkratio) { builder.AddFloat(10, atkratio, 0.0f); }
  public static void AddDurationtime(FlatBufferBuilder builder, float durationtime) { builder.AddFloat(11, durationtime, 0.0f); }
  public static void AddAtkinterval(FlatBufferBuilder builder, float atkinterval) { builder.AddFloat(12, atkinterval, 0.0f); }
  public static void AddSkillprefab(FlatBufferBuilder builder, StringOffset skillprefabOffset) { builder.AddOffset(13, skillprefabOffset.Value, 0); }
  public static void AddAnimationname(FlatBufferBuilder builder, StringOffset animationnameOffset) { builder.AddOffset(14, animationnameOffset.Value, 0); }
  public static void AddHitfxprefab(FlatBufferBuilder builder, StringOffset hitfxprefabOffset) { builder.AddOffset(15, hitfxprefabOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(16, level, 0); }
  public static void AddAttacktype(FlatBufferBuilder builder, int attacktype) { builder.AddInt(17, attacktype, 0); }
  public static void AddSelectortype(FlatBufferBuilder builder, int selectortype) { builder.AddInt(18, selectortype, 0); }
  public static Offset<fb.skillconfigTR> EndskillconfigTR(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.skillconfigTR>(o);
  }

  public static VectorOffset CreateSortedVectorOfskillconfigTR(FlatBufferBuilder builder, Offset<skillconfigTR>[] offsets) {
    Array.Sort(offsets, (Offset<skillconfigTR> o1, Offset<skillconfigTR> o2) => builder.DataBuffer.GetInt(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetInt(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static skillconfigTR? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetInt(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new skillconfigTR().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
