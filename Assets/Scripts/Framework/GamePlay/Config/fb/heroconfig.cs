// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct heroconfigTB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static heroconfigTB GetRootAsheroconfigTB(ByteBuffer _bb) { return GetRootAsheroconfigTB(_bb, new heroconfigTB()); }
  public static heroconfigTB GetRootAsheroconfigTB(ByteBuffer _bb, heroconfigTB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public heroconfigTB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public fb.heroconfigTR? HeroconfigTRS(int j) { int o = __p.__offset(4); return o != 0 ? (fb.heroconfigTR?)(new fb.heroconfigTR()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int HeroconfigTRSLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public fb.heroconfigTR? HeroconfigTRSByKey(int key) { int o = __p.__offset(4); return o != 0 ? fb.heroconfigTR.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<fb.heroconfigTB> CreateheroconfigTB(FlatBufferBuilder builder,
      VectorOffset heroconfigTRSOffset = default(VectorOffset)) {
    builder.StartTable(1);
    heroconfigTB.AddHeroconfigTRS(builder, heroconfigTRSOffset);
    return heroconfigTB.EndheroconfigTB(builder);
  }

  public static void StartheroconfigTB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddHeroconfigTRS(FlatBufferBuilder builder, VectorOffset heroconfigTRSOffset) { builder.AddOffset(0, heroconfigTRSOffset.Value, 0); }
  public static VectorOffset CreateHeroconfigTRSVector(FlatBufferBuilder builder, Offset<fb.heroconfigTR>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHeroconfigTRSVectorBlock(FlatBufferBuilder builder, Offset<fb.heroconfigTR>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHeroconfigTRSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<fb.heroconfigTB> EndheroconfigTB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.heroconfigTB>(o);
  }
  public static void FinishheroconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.heroconfigTB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedheroconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.heroconfigTB> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct heroconfigTR : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static heroconfigTR GetRootAsheroconfigTR(ByteBuffer _bb) { return GetRootAsheroconfigTR(_bb, new heroconfigTR()); }
  public static heroconfigTR GetRootAsheroconfigTR(ByteBuffer _bb, heroconfigTR obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public heroconfigTR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Baseatk { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Sp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Hp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Attackdistance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Attackinterval { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<fb.heroconfigTR> CreateheroconfigTR(FlatBufferBuilder builder,
      int _id = 0,
      float baseatk = 0.0f,
      float sp = 0.0f,
      float hp = 0.0f,
      float attackdistance = 0.0f,
      float attackinterval = 0.0f) {
    builder.StartTable(6);
    heroconfigTR.AddAttackinterval(builder, attackinterval);
    heroconfigTR.AddAttackdistance(builder, attackdistance);
    heroconfigTR.AddHp(builder, hp);
    heroconfigTR.AddSp(builder, sp);
    heroconfigTR.AddBaseatk(builder, baseatk);
    heroconfigTR.Add_id(builder, _id);
    return heroconfigTR.EndheroconfigTR(builder);
  }

  public static void StartheroconfigTR(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void Add_id(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddBaseatk(FlatBufferBuilder builder, float baseatk) { builder.AddFloat(1, baseatk, 0.0f); }
  public static void AddSp(FlatBufferBuilder builder, float sp) { builder.AddFloat(2, sp, 0.0f); }
  public static void AddHp(FlatBufferBuilder builder, float hp) { builder.AddFloat(3, hp, 0.0f); }
  public static void AddAttackdistance(FlatBufferBuilder builder, float attackdistance) { builder.AddFloat(4, attackdistance, 0.0f); }
  public static void AddAttackinterval(FlatBufferBuilder builder, float attackinterval) { builder.AddFloat(5, attackinterval, 0.0f); }
  public static Offset<fb.heroconfigTR> EndheroconfigTR(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.heroconfigTR>(o);
  }

  public static VectorOffset CreateSortedVectorOfheroconfigTR(FlatBufferBuilder builder, Offset<heroconfigTR>[] offsets) {
    Array.Sort(offsets, (Offset<heroconfigTR> o1, Offset<heroconfigTR> o2) => builder.DataBuffer.GetInt(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetInt(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static heroconfigTR? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetInt(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new heroconfigTR().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
